#dict
#python内置了字典:dict ,使用 键-值 存储,具有极快的查找速度
#dict格式如下:
names = {'小木':95,'小石':90,'小虎':78}
print(names['小木'])

#把数据存入dict的方法除了初始化,还可以通过key放入
names['小白'] = 88
print(names['小白'])

#key一次只能对应一个值,一个key多次放入值后,后面的会把前面的覆盖掉
#如果key不存在,dict就会报错
#要避免key不存在的错误,有两种方法,
#一是 通过 in 判断key是否存在
print('小小' in names)

#二是通过 get()方法,如果key不存在,返回 none,或者自己指定的值
print(names.get('小小', -1))

#要删除一个key,用 pop(key)方法 对应的值也会被删除
names.pop('小木')
print(names)

'''请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。

和list比较，dict有以下几个特点：

查找和插入的速度极快，不会随着key的增加而变慢；
需要占用大量的内存，内存浪费多。
而list相反：

查找和插入的时间随着元素的增加而增加；
占用空间小，浪费内存很少。
所以，dict是用空间来换取时间的一种方法。'''

#########需要牢记的第一条就是dict的key必须是不可变对象。字符串和整数都是不可变



########################################################################################
#set 和dict类似,但不存储值.由于key不能重复,所以,在set中没有重复的key
#要创建set,需要提供一个list作为输入集合
s = set([1,2,3])
print(s)
#重复的元素在set中会被过滤掉

s = set([1,2,2,3,4,3,4,1,5,5,6,2,3])
print(s)

#通过add(key)的方法添加元素到set中,可以重复添加,但不会有效果
s.add(4)

#通过remove(key)的方法可以删除元素
s.remove(1)


########################不可变对象##########################################################
# 要始终牢记的是，a是变量，而'abc'才是字符串对象！有些时候，
# 我们经常说，对象a的内容是'abc'，但其实是指，a本身是一个变量，
# 它指向的对象的内容才是'abc'：